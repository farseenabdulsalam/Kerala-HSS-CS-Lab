#!/bin/python
import subprocess
import argparse
import os

SOURCE_DIR = "./htmlfiles"
PROJECT_INPUT_NAME="input.txt"
PROJECT_SOURCE_NAME="source.html"

BUILD_DIR = "./build-files"
BUILD_INPUT_JS_NAME="input.js"
BUILD_SOURCE_HTML_NAME="source-highlight.html" #syntax highlighted version of source
BUILD_OUTPUT_HTML_NAME="modified-source.html" #modified source to add form input and some style
BUILD_OUTPUT_PDF_NAME="output.pdf"

EXTRA_SRC_DIR = "./extra-src"
EXTRA_SOURCE_CSS_NAME = "source-css.css"
EXTRA_OUTPUT_CSS_NAME = "output-css.css"

def get_project_dir(project):
    return os.path.join(SOURCE_DIR,project)

def get_build_dir(project):
    build_dir=os.path.join(BUILD_DIR,project)
    if not os.path.exists(build_dir):
        os.makedirs(build_dir)
    return build_dir

def get_project_file(project,f):
    return os.path.join(get_project_dir(project),f)

def get_build_file(project,f):
    return os.path.join(get_build_dir(project),f)

def get_extra_src_file(f):
    return os.path.join(EXTRA_SRC_DIR,f)

def build_form_input_script(project,force=False):
    prj_input = get_project_file(project,PROJECT_INPUT_NAME)
    prj_input_file = open(prj_input)

    script_header=""
    script_footer=""
    script_content=""

    for line in prj_input_file:
        line = line.strip()
        if not line: continue
        if line.startswith("%"):
            line=line[1:]
            action,element = line.split(" ")
            if action == "submit":
                if element.startswith("#"): element = element[1:]
                script_content+="document.forms['"+element+"'].submit();"
                script_content+="\n"
            elif action == "click":
                if element.startswith("#"):
                    element=element[1:]
                    script_content+="document.getElementById('"+element+"').click()"
                    script_content+="\n"
                else:
                    script_content+="document.getElementsByName('"+element+"')[0].click();\n"
                    script_content+="\n"
            else:
                raise Exception('Invalid action in '+prj_input_file+': '+action)

        else:
            name,value = line.split(":")
            if name.startswith("#"):
                name=name[1:]
                script_content+="document.getElementById('"+name+"').value='"+value+"'"
                script_content+="\n"
            else:
                script_content+="document.getElementsByName('"+name+"')[0].value='"+value+"'"
                script_content+="\n"

    input_js_file = open(get_build_file(project,BUILD_INPUT_JS_NAME),"w")
    input_js_file.write(script_content)
    input_js_file.close()

def build_modified_html_output(project):
    orig_html_text = open(get_project_file(project,PROJECT_SOURCE_NAME)).read()
    new_html_file = open(get_build_file(project,BUILD_OUTPUT_HTML_NAME),'w')
    new_html_text = ""

    output_css_text = open(get_extra_src_file(EXTRA_OUTPUT_CSS_NAME)).read()
    form_input_js_text = open(get_build_file(project,BUILD_INPUT_JS_NAME)).read()

    index_of_body = orig_html_text.find("<body")
    index_of_body_tag_end = orig_html_text.find(">",index_of_body)

    index_of_headend_tag = orig_html_text.find("</head>")
    index_of_bodyend_tag = orig_html_text.find("</body>")

    new_html_text = orig_html_text[0:index_of_headend_tag]+\
                    "<style>\n"+\
                    output_css_text+\
                    "\n</style>\n"+\
                    orig_html_text[index_of_headend_tag:index_of_body_tag_end+1]+\
                    "<h1>"+project+".html output</h1><hr>\n"+\
                    orig_html_text[index_of_body_tag_end+1:index_of_bodyend_tag]+\
                    "<script>\n"+\
                    form_input_js_text+\
                    "\n</script>\n"+\
                    orig_html_text[index_of_bodyend_tag:]
    new_html_file.write(new_html_text)
    new_html_file.close()

def build_syntax_highlighted_source_html(project):
    command_string = "source-highlight -i "+\
                     get_project_file(project,PROJECT_SOURCE_NAME)+\
                     " -o "+\
                     get_build_file(project,BUILD_SOURCE_HTML_NAME)
    if subprocess.call(command_string.split())!=0:
        raise Exception("Couldnot create source-highlighted output")

    old_html_text = open(get_build_file(project,BUILD_SOURCE_HTML_NAME)).read()
    new_html_file = open(get_build_file(project,BUILD_SOURCE_HTML_NAME),'w')
    new_html_text = ""

    source_css_text = open(get_extra_src_file(EXTRA_SOURCE_CSS_NAME)).read()

    index_of_body_tag = old_html_text.find("<body")
    index_of_body_tag_end = old_html_text.find(">",index_of_body_tag)

    new_html_text = old_html_text[0:index_of_body_tag_end+1]+\
                    "<style>\n"+\
                    source_css_text+\
                    "\n</style>\n"+\
                    "<h1>"+project+".html source</h1>"+\
                    old_html_text[index_of_body_tag_end+1:]

    new_html_file.write(new_html_text)
    new_html_file.close()

def build_pdf(project):
    command_string = "wkhtmltopdf"+\
                     " page "+get_build_file(project,BUILD_SOURCE_HTML_NAME)+\
                     " page "+get_build_file(project,BUILD_OUTPUT_HTML_NAME)+\
                     " "+get_build_file(project,BUILD_OUTPUT_PDF_NAME)

    if subprocess.call(command_string.split())!=0:
        raise Exception("Couldnot create pdf file")

def is_project_dir_valid(project_dir):
    return os.path.isdir(os.path.join(SOURCE_DIR,project_dir)) and\
           os.path.exists(os.path.join(SOURCE_DIR,project_dir,PROJECT_SOURCE_NAME))


def list_of_projects():
    return [project_dir for project_dir in os.listdir(SOURCE_DIR)
                if is_project_dir_valid(project_dir)]



################MAIN###############

def main():
    parser = argparse.ArgumentParser(
    description="Automate creation of pdfs containing source code and output")

    parser.add_argument('--force','-f',
            action='store_true',
            help='Force compilation, even if files are not modified')
    parser.add_argument('project',nargs='*',
            help='The project to compile. If empty, will compile all projects')

    args = parser.parse_args()

    projects = [ project for project in args.project
                if is_project_dir_valid(project) ]

    if not projects:
        projects = list_of_projects()

    for  project in projects:
        print("Project: %s" % project)
        print("---------------------")
        print("Applying %s.." % PROJECT_INPUT_NAME)
        build_form_input_script(project)
        print("Adding style to %s.." % PROJECT_SOURCE_NAME)
        build_modified_html_output(project)
        print("Creating syntax-highlighted source..")
        build_syntax_highlighted_source_html(project)
        print("Building PDF")
        build_pdf(project)
        print("---------------------")




if __name__ == "__main__":
    main()

