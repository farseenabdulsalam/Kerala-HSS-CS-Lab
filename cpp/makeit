#!/bin/bash

_SOURCE_DIR="./programs"

cd $_SOURCE_DIR
# Compile cpp and produce binary
# Expects the name of project as $1
# compiles ./$1/$1.cpp to ./$1/$1
# returns 1 if the folder contains
# no cpp
# exits with 1 if g++ fails
function make_cpp {
  if [ -d "$1" -a -f "$1/$1.cpp" ]; then #$1 is a dir and $1/$1.cpp exists

    if [ "$2" = "force" -o "$1/$1.cpp" -nt "$1/$1" ]; then #$1.cpp is newer than $1 binary
      g++ "$1/$1.cpp" -o "$1/$1"
      if [ $? -ne 0 ]; then
        echo "There was an error compiling \"$1\"."
        echo
        exit 1
      fi
      echo " + Compiled $1/$1.cpp"
    else
      echo " - $1/$1.cpp up to date"
    fi
  else
    return 1
  fi
}

# Pass the input.txt to the binary and
# produce an output.txt
# returns 1 if $1 is not a folder
# returns 2 if $1/input doesnot exist
function make_output {
  if [ ! -d "$1" ]; then # dir exists
    return 1
  fi

  if [ ! -f "$1/input.txt" ]; then #input exists
    return 2
  fi

  if [ ! -f "$1/$1" ]; then #input exists
    return 3
  fi

  #output is older than input or binary
  if [ "$2" = "force" -o "$1/output.txt" -ot "$1/input.txt" -o "$1/output.txt" -ot "$1/$1" ]; then
    #record stdin and stdout to a file (man script for more info)
    #awk sleep helps to prevent stdin being written before stdout
    awk '{ system("sleep 0.01");print }' "$1/input.txt" |script -qc "$1/$1" $1/output.tmp >$1/output.txt
    #tmp file is a workaround against a bug in `script`
    #which doesnot obey -q
    rm $1/output.tmp
    echo " + Created $1/output.txt"
  else
    echo " - $1/output.txt up to date"
  fi
}

# Combine source cpp and output.txt to a syntax highlighted
# pdf
function make_pdf {
  if [ ! -d "$1" ]; then
    return 1;
  fi

  if [ ! -f "$1/$1.cpp" -o ! -f "$1/output.txt" ]; then
    return 2;
  fi

  if [ "$2" != "force" -a "$1/$1.pdf" -nt "$1/$1.cpp" -a "$1/$1.pdf" -nt "$1/output.txt" ]; then
    echo " - $1/$1.pdf up to date "
    return 0
  fi

  echo "<H1>${1^^}.CPP source</H1>">"$1/head.tmp"

  echo "<style> body,pre,tt { font-family: Fantasque Sans Mono,Consolas, Menlo, Monaco,\
Lucida Console, Liberation Mono, DejaVu Sans Mono, Bitstream Vera Sans Mono,\
Courier New, monospace;font-size:12px; } h1 {text-shadow: 1px 1px 1px #ccc;border: solid 1px #eee;padding: 0.5em}\
tt {background-color: rgb(240, 240, 240);display: block;padding: 1em;border: solid 1px #eee;}\
body{padding: 1.5em;}</style>">"$1/foot.tmp"

  source-highlight -n -i "$1/$1.cpp" -o "$1/source.html" -H "$1/head.tmp" -F "$1/foot.tmp"
  echo "<H1>${1^^}.CPP output</H1>">"$1/head.tmp"
  source-highlight -n -i "$1/output.txt" -s bash -o "$1/output.html" -H "$1/head.tmp" -F "$1/foot.tmp"

  rm "$1/head.tmp" "$1/foot.tmp"

  wkhtmltopdf page "$1/source.html" page "$1/output.html" "$1/$1.pdf" >>wkhtmltopdf.log
  if [ $? -ne 0 ]; then
    echo " X Failed to create $1/$1.pdf. Please check the logs"
  fi
  rm "$1/source.html" "$1/output.html"
  echo " + Created $1/$1.pdf"
}
################ main #####################

# no arg or arg is help
if [ "$1" = "help" ]; then
  echo "makeit: Compiles cpp files and provides output."
  echo "Syntax: makeit [cpp|output|pdf|all] [--force] [<project-folder>]"
  echo "Requires: bash (version>=4.0) for this script"
  echo "          gcc for compiling c++"
  echo "          awk, script for combining input and output"
  echo "          source-highlight for creating syntax-highlighted html from source"
  echo "          wkhtmltopdf for converting html to pdf"
  exit 0
fi

_compile="all"
_force=""
_projects=(*/)
case $1 in
  cpp|output|pdf|all) _compile=$1; shift;;
  #shift shifts $2-->$1; old $1 gets destroyed
esac

case $1 in
  "--force") _force="force"; shift;;
esac

#if project name is present, only compile given projs
if [ ! -z "$1" ]; then
  _projects=($*)
fi

echo "Making: $_compile"
echo "Projects: ${_projects[@]%/}"
echo

function compile_cpp_from_array {
  for project in ${_projects[@]%/}; do
    make_cpp "$project" "$_force"
    if [ $? -ne 0 ]; then
      echo " X Invalid project folder: $project"
      return 1
    fi
  done
}

function compile_output_from_array {
  for project in ${_projects[@]%/}; do
    make_output "$project" "$_force"
    if [ $? -ne 0 ]; then
      echo " X Invalid project folder or input not found: $project"
      return 1
    fi
  done
}

function compile_pdf_from_array {
  for project in ${_projects[@]%/}; do
    make_pdf "$project" "$_force"
    if [ $? -ne 0 ]; then
      echo " X Invalid project folder or source/output not found: $project"
      return 1
    fi
  done
}
case $_compile in
  cpp)
    compile_cpp_from_array
    ;;
  output)
    compile_output_from_array
    ;;
  pdf)
    compile_pdf_from_array
    ;;
  all)
    echo "Compiling CPP.."
    compile_cpp_from_array
    echo "----------------"
    echo "Producing Output.."
    compile_output_from_array
    echo "----------------"
    echo "Creating PDF.."
    compile_pdf_from_array
    echo "----------------"
    ;;
esac
cd ..
exit 0
